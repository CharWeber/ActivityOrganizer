// <auto-generated />
using System;
using Gym.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gym.Migrations
{
    [DbContext(typeof(GymContext))]
    partial class GymContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Gym.Models.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Completed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ActivityId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Gym.Models.ActivityPlayer", b =>
                {
                    b.Property<int>("ActivityPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("ActivityPlayerId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("PlayerId");

                    b.ToTable("ActivityPlayer");
                });

            modelBuilder.Entity("Gym.Models.Amenity", b =>
                {
                    b.Property<int>("AmenityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Close")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Open")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ReservationRequired")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("AmenityId");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("Gym.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Gym.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int?>("AmenityId")
                        .HasColumnType("int");

                    b.Property<string>("AmenityReserved")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ReservationId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Gym.Models.ActivityPlayer", b =>
                {
                    b.HasOne("Gym.Models.Activity", "Activity")
                        .WithMany("PlayerJoinEntities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gym.Models.Player", "Player")
                        .WithMany("ActivityJoinEntities")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Gym.Models.Reservation", b =>
                {
                    b.HasOne("Gym.Models.Activity", "Activity")
                        .WithMany("Reservations")
                        .HasForeignKey("ActivityId");

                    b.HasOne("Gym.Models.Amenity", "Amenity")
                        .WithMany("Reservations")
                        .HasForeignKey("AmenityId");

                    b.Navigation("Activity");

                    b.Navigation("Amenity");
                });

            modelBuilder.Entity("Gym.Models.Activity", b =>
                {
                    b.Navigation("PlayerJoinEntities");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Gym.Models.Amenity", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Gym.Models.Player", b =>
                {
                    b.Navigation("ActivityJoinEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
